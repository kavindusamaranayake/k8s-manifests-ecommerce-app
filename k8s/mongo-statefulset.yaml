apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: ecommerce
spec:
  serviceName: "mongo"
  replicas: 1
  selector:
    matchLabels:
      app: ecommerce
      tier: db
  template:
    metadata:
      labels:
        app: ecommerce
        tier: db
    spec:
      containers:
        - name: mongo
          image: mongo:6.0.15
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: MONGO_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: MONGO_PASSWORD
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
          # livenessProbe:
          #   exec:
          #     command: ["mongo", "--eval", "db.adminCommand('ping')"]
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   exec:
          #     command: ["mongo", "--eval", "db.adminCommand('ping')"]
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # startupProbe:
          #   exec:
          #     command: ["mongo", "--eval", "db.adminCommand('ping')"]
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          #   failureThreshold: 30
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 256Mi   # Reduced from 1Gi to 256Mi
      storageClassName: standard
  # Use your cluster's storage class

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: ecommerce
spec:
  selector:
    app: ecommerce
    tier: db
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None  # Headless for StatefulSet
